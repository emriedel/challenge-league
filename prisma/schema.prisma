// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  responses Response[]
  votes Vote[]
  leagueMemberships LeagueMembership[]

  @@map("users")
}

model Prompt {
  id          String       @id @default(cuid())
  text        String
  category    String?      // e.g., "Cooking", "Creativity", "Photography"
  difficulty  Int          @default(1) // 1-3 difficulty level
  weekStart   DateTime     // Saturday 12 PM PT when this prompt becomes active
  weekEnd     DateTime     // Next Saturday 12 PM PT when submissions close
  voteStart   DateTime     // Saturday 12 PM PT when voting opens
  voteEnd     DateTime     // Monday 12 PM PT when voting closes
  status      PromptStatus @default(SCHEDULED)
  queueOrder  Int          // Order in the queue (lower numbers = sooner)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  responses Response[]

  @@map("prompts")
}

enum PromptStatus {
  SCHEDULED  // Future prompt waiting in queue
  ACTIVE     // Currently accepting submissions
  VOTING     // Submissions closed, voting is open
  COMPLETED  // Voting closed, results published
}

model Response {
  id          String    @id @default(cuid())
  caption     String
  imageUrl    String
  submittedAt DateTime  @default(now())
  isPublished Boolean   @default(false) // Published when submission window closes
  publishedAt DateTime?
  totalVotes  Int       @default(0) // Total number of votes received
  totalPoints Int       @default(0) // Total weighted points from votes
  finalRank   Int?      // Final ranking position (1st, 2nd, 3rd, etc.)

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  promptId String
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  votes    Vote[]

  @@unique([userId, promptId]) // One response per user per prompt
  @@map("responses")
}

model League {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  memberships LeagueMembership[]

  @@map("leagues")
}

model LeagueMembership {
  id        String   @id @default(cuid())
  joinedAt  DateTime @default(now())
  isActive  Boolean  @default(true)

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  leagueId String
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueId])
  @@map("league_memberships")
}

model Vote {
  id        String   @id @default(cuid())
  rank      Int      // 1 = first choice (3 points), 2 = second choice (2 points), 3 = third choice (1 point)
  points    Int      // Points awarded (3, 2, or 1)
  createdAt DateTime @default(now())

  voterId    String
  voter      User     @relation(fields: [voterId], references: [id], onDelete: Cascade)
  responseId String
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@unique([voterId, responseId]) // One vote per voter per response
  @@unique([voterId, rank]) // One vote per rank per voter (can't give two responses the same rank)
  @@map("votes")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
