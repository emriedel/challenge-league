// Production Prisma schema for PostgreSQL
// This is used for deployment to production environments

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  username      String    @unique
  password      String
  profilePhoto  String?   // URL to user's profile photo
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Email verification
  emailVerified      DateTime? // When email was verified
  verificationToken  String?   // Token for email verification
  verificationExpiry DateTime? // Verification token expiration

  // Password reset
  resetToken       String?   // Password reset token
  resetTokenExpiry DateTime? // Reset token expiration (1 hour)

  accounts Account[]
  sessions Session[]
  responses Response[]
  votes Vote[]
  comments Comment[]
  leagueMemberships LeagueMembership[]
  ownedLeagues League[] @relation("LeagueOwner")
  pushSubscriptions PushSubscription[]
  chatMessages ChatMessage[]
  activities UserActivity[]
  emailPreferences EmailPreferences?

  @@map("users")
}

model Prompt {
  id             String       @id @default(cuid())
  text           String
  phaseStartedAt DateTime?    // When the current phase (ACTIVE/VOTING) started
  status         PromptStatus @default(SCHEDULED)
  queueOrder     Int          // Order in the queue (lower numbers = sooner)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Explicit phase completion timestamps (replaces calculated times)
  submissionEndedAt DateTime?  // When submission phase actually ended (ACTIVE → VOTING)
  votingEndedAt     DateTime?  // When voting phase actually ended (VOTING → COMPLETED)
  completedAt       DateTime?  // When challenge was marked COMPLETED

  // 24-hour warning notification tracking
  submissionWarningNotificationSent Boolean @default(false)
  votingWarningNotificationSent     Boolean @default(false)

  leagueId    String
  league      League       @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  responses   Response[]

  // Database constraint: Partial unique index prevents multiple ACTIVE/VOTING prompts per league
  // See migration: 20250912012903_prevent_multiple_active_prompts
  // CREATE UNIQUE INDEX "idx_one_active_prompt_per_league" ON "prompts" ("leagueId") WHERE "status" IN ('ACTIVE', 'VOTING')
  @@map("prompts")
}

enum PromptStatus {
  SCHEDULED  // Future prompt waiting in queue
  ACTIVE     // Currently accepting submissions
  VOTING     // Submissions closed, voting is open
  COMPLETED  // Voting closed, results published
}

model Response {
  id          String    @id @default(cuid())
  caption     String
  imageUrl    String
  submittedAt DateTime  @default(now())
  isPublished Boolean   @default(false) // Published when submission window closes
  publishedAt DateTime?
  totalVotes  Int       @default(0) // Total number of votes received (1 vote = 1 point)
  finalRank   Int?      // Final ranking position (1st, 2nd, 3rd, etc.)

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  promptId String
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)
  votes    Vote[]
  comments Comment[]

  @@unique([userId, promptId]) // One response per user per prompt
  @@map("responses")
}

model League {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  inviteCode  String    @unique // Code for users to join
  isActive    Boolean   @default(true)
  isStarted   Boolean   @default(false) // Whether the league has been started by owner
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Configurable league settings
  submissionDays Int     @default(5)  // Days for submission phase
  votingDays     Int     @default(2)  // Days for voting phase
  votesPerPlayer Int     @default(3)  // Number of votes each player gets

  ownerId     String
  owner       User      @relation("LeagueOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  memberships LeagueMembership[]
  prompts     Prompt[]
  chatMessages ChatMessage[]
  userActivities UserActivity[]

  @@map("leagues")
}

model LeagueMembership {
  id        String   @id @default(cuid())
  joinedAt  DateTime @default(now())
  isActive  Boolean  @default(true)

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  leagueId String
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueId])
  @@map("league_memberships")
}

model Vote {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  isSelfVote Boolean  @default(false) // True if this is a free vote for user's own submission

  voterId    String
  voter      User     @relation(fields: [voterId], references: [id], onDelete: Cascade)
  responseId String
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)

  // No unique constraint - users can give multiple votes to the same response
  @@map("votes")
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  responseId String
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@unique([authorId, responseId]) // One comment per user per response (but editable)
  @@map("comments")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String
  p256dh    String   // Public key for encryption
  auth      String   // Auth secret for encryption
  userAgent String?  // Optional: to identify the device/browser
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint]) // One subscription per user per device/browser
  @@map("push_subscriptions")
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  leagueId String
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model UserActivity {
  id                    String    @id @default(cuid())
  userId                String
  leagueId              String
  lastViewedResults     DateTime? // When user last viewed Results tab for this league
  lastReadChatMessage   DateTime? // When user last read chat messages for this league
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueId]) // One activity record per user per league
  @@map("user_activities")
}

model EmailPreferences {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Email notification preferences
  challengeStarted Boolean @default(true)  // New challenge has started
  votingStarted    Boolean @default(true)  // Voting phase has begun
  resultsReady     Boolean @default(true)  // Challenge results are available
  weeklyDigest     Boolean @default(false) // Weekly league summary

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_preferences")
}