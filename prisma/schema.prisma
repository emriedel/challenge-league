// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  responses Response[]
  sentFriendships Friendship[] @relation("FriendshipSender")
  receivedFriendships Friendship[] @relation("FriendshipReceiver")

  @@map("users")
}

model Prompt {
  id          String    @id @default(cuid())
  text        String
  weekStart   DateTime  // Saturday 12 PM PT when this prompt becomes active
  weekEnd     DateTime  // Next Saturday 12 PM PT when submissions close
  isActive    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  responses Response[]

  @@map("prompts")
}

model Response {
  id          String    @id @default(cuid())
  caption     String
  imageUrl    String
  submittedAt DateTime  @default(now())
  isPublished Boolean   @default(false) // Published when submission window closes
  publishedAt DateTime?

  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  promptId String
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId]) // One response per user per prompt
  @@map("responses")
}

model Friendship {
  id         String   @id @default(cuid())
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  senderId   String
  sender     User @relation("FriendshipSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String  
  receiver   User @relation("FriendshipReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friendships")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
