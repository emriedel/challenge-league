#!/bin/bash

# Production Database Migration Script
# Safely applies database schema changes to production while preserving all data

set -e  # Exit on any error

echo "üîÑ Starting production database migration..."
echo

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    echo "‚ùå Error: This script must be run from the project root directory"
    exit 1
fi

# Check if vercel CLI is installed
if ! command -v vercel &> /dev/null; then
    echo "‚ùå Error: Vercel CLI not found. Please install it first:"
    echo "   npm install -g vercel"
    exit 1
fi

echo "üì• Step 1: Pulling production environment variables..."
vercel env pull .env.production

if [ ! -f ".env.production" ]; then
    echo "‚ùå Error: Failed to pull production environment variables"
    echo "   Make sure you're logged in: vercel login"
    echo "   Make sure project is linked: vercel link"
    exit 1
fi

echo "‚úÖ Production environment variables pulled successfully"
echo

echo "üíæ Step 2: Backing up current local environment..."
if [ -f ".env" ]; then
    mv .env .env.backup
    echo "‚úÖ Local .env backed up to .env.backup"
else
    echo "‚ÑπÔ∏è  No local .env found, skipping backup"
fi
echo

echo "üîÑ Step 3: Backing up current schema..."
cp prisma/schema.prisma prisma/schema.backup
echo "‚úÖ Schema backed up to prisma/schema.backup"
echo

echo "üîÑ Step 4: Preparing production migration..."
# Don't overwrite .env - use explicit env file for production migration
echo "‚úÖ Using production credentials from .env.production"
echo

echo "üóÉÔ∏è  Step 5: Applying database migrations to production..."
echo "‚ö†Ô∏è  This will update the production database schema while preserving all data"
echo

# Run the migration with explicit production environment
cp prisma/schema.production.prisma prisma/schema.prisma

# Use explicit env file instead of overwriting local .env
echo "Running database migration with production credentials..."
if ! DATABASE_URL=$(grep DATABASE_URL .env.production | cut -d '=' -f2- | sed 's/^"//' | sed 's/"$//') npx prisma db push; then
    echo
    echo "‚ùå Migration failed due to potential data loss."
    echo "Prisma detected changes that could result in data loss."
    echo 
    echo "To proceed anyway (only if you're certain it's safe):"
    echo "   DATABASE_URL=\$(grep DATABASE_URL .env.production | cut -d '=' -f2- | sed 's/^\"//' | sed 's/\"\$//') npx prisma db push --accept-data-loss"
    echo
    echo "Or review the changes and modify your schema accordingly."
    exit 1
fi

echo "‚úÖ Database migration completed successfully!"
echo

echo "üîÑ Step 6: Restoring local development environment..."
if [ -f ".env.backup" ]; then
    mv .env.backup .env
    echo "‚úÖ Local environment restored"
else
    echo "‚ÑπÔ∏è  Local .env was not modified during migration"
fi

echo "üîÑ Step 7: Restoring original schema..."
if [ -f "prisma/schema.backup" ]; then
    mv prisma/schema.backup prisma/schema.prisma
    echo "‚úÖ Original schema restored"
else
    echo "‚ö†Ô∏è  Warning: No schema backup found"
fi

# Clean up
rm -f .env.production
echo "‚úÖ Cleaned up temporary files"
echo

echo "üéâ Production migration completed successfully!"
echo
echo "Next steps:"
echo "1. Deploy your updated code: git push"
echo "2. Verify the changes work in production"
echo
echo "üìä Your production data has been preserved:"
echo "   ‚Ä¢ All user accounts and profiles"
echo "   ‚Ä¢ All competition responses and votes"
echo "   ‚Ä¢ All league memberships and settings"
echo "   ‚Ä¢ Complete competition history"